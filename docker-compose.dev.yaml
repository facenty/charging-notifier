version: '3.7'

services:
  backend:
    build:
      context: ./backend/
      target: development-build-stage
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - '8080:8080'
    environment:
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_DATABASE: mongoose
    volumes:
      - ./backend/:/app
      - /app/node_modules
    restart: 'unless-stopped'
    networks:
      - server-network
    links:
      - mongo
    depends_on:
      - mongo

  # mongo:
  #   image: mvertes/alpine-mongo
  #   container_name: mongo
  #   ports:
  #     - '27017:27017'
  #     - '28017:28017'
  #   networks:
  #     - server-network

  mongo:
    image: mongo
    container_name: mongo
    restart: always
    ports:
      - 27017:27017
      - 28017:28017
    volumes:
      - ./data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
        - server-network

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    depends_on:
      - mongo
    links:
      - mongo
    networks:
      - server-network

  frontend:
    build:
      context: ./frontend/
      target: node-development-build-stage
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - '3000:3000'
    volumes:
      - ./frontend/:/app
      # - /app/node_modules
    restart: 'unless-stopped'
    networks:
      - server-network

  proxy:
    build:
      context: ./frontend/
      target: nginx-development-build-stage
      dockerfile: Dockerfile
    container_name: proxy
    ports:
      - '80:80'
    volumes:
      - ./frontend/nginx/common/default.conf:/etc/nginx/nginx.conf
      - ./frontend/nginx/development/frontend.conf:/etc/nginx/frontend.conf
    restart: 'unless-stopped'
    networks:
      - server-network
    links:
      - backend
      - frontend
    depends_on:
      - backend
      - frontend

networks:
  server-network:
    driver: bridge

volumes:
  data:
    driver: local
